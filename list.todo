RenderBoi:
    Project:
        ✔ Port to VSCode @done(20-04-17 03:59)
        ☐ Write test suite
        ☐ Set up continuous integration
    Core:
        VertexDataManager:
            ☐ A VertexDataManager holds actual vertex data and takes care of memory management
            ☐ Meshes now only keep handles to vertex content held in a VertexDataManager
            ☐ Investigate better buffering methods
        Camera:
            ☐ Set the projection matrix in terms of parameters rather than a full matrix
            ☐ Clean up smart updates depending on parameter values
        Scene:
            ☐ In `moveObject`, add possibility to keep world position of moved object
            ☐ Add something like `registerObjectTree(ScenePtr)` to import complex objects into a scene
        SceneRenderer:
            ☐ Make drawing methods and buffer queries queuable
            ☐ Mesh rendering order based on their VertexDataManager handle, then on the requested shader
            ☐ Eliminate buffer swaps between objects sharing the same vertex data
        PositionedObject:
            ✔ Change SceneObject inheritance into a compoud Transform object @done(20-07-02 17:00)
            ☐ Viable alternative to the ugly `transformModified` flag fix (observer pattern)
        ☐ Dynamic meshes
        ☐ Unity-like prefab system?
        ☐ Shadows
        ☐ Transparency
        ☐ Portals
        ☐ Particle systems
    I/O:
        ☐ (De)serialize scenes
        ☐ Load models with Assimp
    Window:
        ✔ Isolate calls to GLFW in a windowing tool module @done(20-07-02 15:04)
    Examples:
        ☐ Times table arranged in a circle (https://www.youtube.com/watch?v=qhbuKbxJsk8)
        ☐ Spyrograph thing (https://www.youtube.com/watch?v=7Fn-26Jmi5E)
    FIXME:
        ☐ Transform::lookAt
        ☐ Transform::rotate with localAxis==true
        ✔ Light attenuation @done(20-04-20 06:55)
    Crossplatform-ability:
        ✔ Provide OpenGL core context hint for GLFW except when EGL is used (i.e. on Wayland systems) @done(20-07-02 14:19)
    Online resources:
        https://www.youtube.com/watch?v=-bCeNzgiJ8I&list=PLckFgM6dUP2hc4iy-IdKFtqR9TeZWMPjm
        http://media.steampowered.com/apps/steamdevdays/slides/beyondporting.pdf
        https://www.slideshare.net/CassEveritt/approaching-zero-driver-overhead
