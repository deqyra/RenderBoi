RenderBoi:
    Project:
        ✔ Port to VSCode @done(20-04-17 03:59)
        ☐ Write test suite
        ☐ Set up continuous integration
        ✔ Better documentation @done(20-10-19 19:22)
    Core:
        Camera:
            ✔ Use a parent transform instead of a simple up vector @done(20-10-14 12:27)
            ✔ Simplify view matrix retrieval functions @done(20-10-20 14:28)
            ☐ Set the projection matrix in terms of parameters rather than a full matrix
            ☐ Clean up smart updates depending on parameter values
        Components:
            ☐ In MeshComponent, make the mesh pointer private, add getter and setter to it
            ☐ Keep a shared pointer to the SceneObject
            ✔ Provide info as to whether a certain component type is allowed more than once per object @done(20-10-20 16:02)
        Factory:
            ☐ Method to attach camera and scripts to scene object, and to make new object with those
        Mesh:
            ☐ Handle several types of draw methods per single mesh
        Scene:
            ✔ In `moveObject`, add possibility to keep world position of moved object @done(20-10-13 14:49)
            ☐ Add something like `registerObjectTree(ScenePtr)` to import complex objects into a scene
            ✔ In `getWorldTransform`, the `_transformsUpToDate` test is useless in most cases: FIXED @done(20-10-13 15:33)
            ✔ Clean up the bullshit with `Scene::init` and `SceneObject::setScene` and whatnot, implement a clean factory instead @done(20-10-12 10:22)
            ☐ Refactor methods taking in pointers to taking in IDs where applicable
            ✔ Return shared pointers instead of weak pointers where possible @done(20-10-20 16:19)
            ✔ Refactor getComponent & co to fit new several-per-type components @done(20-10-20 16:14)
            ☐ Refactor methods (e.g. object creation and registration) to skip sanity checks where unnecessary
        SceneObject:
            ✔ Add name for debugging purposes @done(20-10-19 12:04)
            ✔ Return shared pointers instead of weak pointers where possible @done(20-10-20 16:17)
            ☐ Keep a shared pointer to the scene
        SceneRenderer:
            ✔ Implement a framerate limiter @done(20-10-19 21:49)
            ☐ Mesh rendering order based on the requested shader, then on their VertexDataManager handle
            ☐ Eliminate buffer swaps between objects sharing the same vertex data
            ☐ Transform direction of lights according to the world transform of their object
            ☐ Skip the normal restoration where applicable
            ☐ Render meshes using a transform, not a matrix
            ☐ Do not try and set stuff if the requested shader does not handle it
        Scripts:
            ✔ Separate FPSCameraScript into MouseCameraScript and KeyboardMovementScript @done(20-10-20 14:06)
            ✔ Give a camera reference to the KeyboardMovementScript for it to use a proper front vector @done(20-10-20 18:30)
        Texture:
            ☐ Check texture generation success and display error info
        Transform:
            ✔ Change SceneObject inheritance from PositionedObject into a compoud Transform object @done(20-07-02 17:00)
            ✔ Viable alternative to the ugly `transformModified` flag fix (observer pattern) @done(20-09-02 15:12)
            ✔ Implement transformations relative to different frames of reference @done(20-10-10 12:50)
            ✔ Implement `Transform::compoundFrom(const Transform& other)` @done(20-10-13 13:49)
            ☐ Fix all scaling issues in `ObjectTransform`
            ☐ Add frames of reference for `rotateBy(glm::quat)` and `scaleBy(glm::vec3)`
        VertexDataManager:
            ☐ A VertexDataManager holds actual vertex data and takes care of memory management
            ☐ Meshes now only keep handles to vertex content held in a VertexDataManager
            ☐ Investigate better buffering methods
        ☐ Dynamic meshes
        ☐ Unity-like prefab system?
        ☐ Shadows
        ☐ Transparency
        ☐ Portals
        ☐ Particle systems
    I/O:
        ☐ (De)serialize scenes
        ☐ Load models with Assimp
    Window:
        ✔ Isolate calls to GLFW in a windowing tool module @done(20-07-02 15:04)
    Examples:
        ☐ Times table arranged in a circle (https://www.youtube.com/watch?v=qhbuKbxJsk8)
        ☐ Spyrograph thing (https://www.youtube.com/watch?v=7Fn-26Jmi5E)
    Tools:
        ✔ Clean up the massive mess going on in Tree @done(20-10-13 15:46)
    FIXME:
        ✔ Transform::lookAt @done(20-10-13 17:04)
        ✔ Light attenuation @done(20-04-20 06:55)
    Crossplatform-ability:
        ✔ Provide OpenGL core context hint for GLFW except when EGL is used (i.e. on Wayland systems) @done(20-07-02 14:19)
    Online resources:
        https://www.youtube.com/watch?v=-bCeNzgiJ8I&list=PLckFgM6dUP2hc4iy-IdKFtqR9TeZWMPjm
        http://media.steampowered.com/apps/steamdevdays/slides/beyondporting.pdf
        https://www.slideshare.net/CassEveritt/approaching-zero-driver-overhead
