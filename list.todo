RenderBoi:
    Project:
        ✔ Port to VSCode @done(20-04-17 03:59)
        ☐ Write test suite
        ☐ Better exceptions
        ✔ Use ADL to find proper to_string instead of polluting std @done(21-01-04 23:29)
        ✔ Make everything part of a RenderBoi namespace @done(21-01-04 23:29)
        ✔ Use const refs where applicable (especially upon fetching values held by iterators) @done(20-12-28 04:52)
        ✔ Start static member names with caps @done(20-12-28 04:52)
        ✔ Add const qualifiers everywhere and constexpr qualifiers where possible @done(20-12-28 04:52)
        ☐ Investigate CRTP to eliminate vtables in large inheritance trees
        ☐ Investigate CRTP to make clone methods "self-implement"
        ✔ Remove virtual keywords where unnecessary @done(20-12-26 15:02)
        ✔ Move tools to external repo and update CMake to use it @done(20-12-17 14:20)
        ☐ Set up continuous integration
        ✔ Better documentation @done(20-10-19 19:22)
        ☐ In all accessor functions using local-statically generated data: provide a refresh argument
    Core:
        Camera:
            ✔ Use a parent transform instead of a simple up vector @done(20-10-14 12:27)
            ✔ Simplify view matrix retrieval functions @done(20-10-20 14:28)
            ✔ Set the projection matrix in terms of parameters rather than a full matrix @done(20-10-26 16:56)
            ✔ Clean up smart updates depending on parameter values @done(20-10-26 16:56)
        Mesh:
            ☐ Handle several types of draw methods per single mesh
            ✔ Use glMultiDrawElements, adapt mesh generators @done(20-11-05 08:59)
            ☐ Star mesh generator (branch count, inset, hollow)
        Shaders:
            ✔ Use GL_ARB_shader_language_include @done(20-10-24 17:30)
            ✔ Declare uniform blocks in their own file @done(20-10-24 17:30)
            ✔ Interface blocks too @done(20-10-24 17:31)
            ✔ Find a way to tell whether a shader provides has certain render features @done(20-10-24 17:59)
            ✔ On-demand shader generation @done(20-11-21 02:50)
            ☐ Remember the location of a shader and give it back when asked to generate again
            ☐ Kaleidoscopic fragment shader
            ✔ Fix attenuation @done(20-11-05 07:27)
            ✔ Fix Blinn-Phong @done(20-11-05 07:27)
            ✔ Fix gamma correction @done(20-11-05 07:27)
        Texture:
            ☐ Check texture generation success and display error info
        Transform:
            ✔ Change SceneObject inheritance from PositionedObject into a compoud Transform object @done(20-07-02 17:00)
            ✔ Viable alternative to the ugly `transformModified` flag fix (observer pattern) @done(20-09-02 15:12)
            ✔ Implement transformations relative to different frames of reference @done(20-10-10 12:50)
            ✔ Implement `Transform::compoundFrom(const Transform& other)` @done(20-10-13 13:49)
            ☐ Fix all scaling issues in `ObjectTransform`
            ☐ Add frames of reference for everything that doesn't have it
        VertexDataManager:
            ☐ A VertexDataManager holds actual vertex data and takes care of memory management
            ☐ Meshes now only keep handles to vertex content held in a VertexDataManager
            ☐ Investigate better buffering methods
        ☐ Dynamic meshes
        ☐ Unity-like prefab system?
        ☐ Shadows
        ☐ Transparency
        ☐ Portals
        ☐ Particle systems
    I/O:
        ☐ (De)serialize scenes
        ☐ Load models with Assimp
    Toolbox:
        Components:
            ✔ In MeshComponent, make the mesh pointer private, add getter and setter to it @done(20-10-21 16:35)
            ✔ Keep a shared pointer to the SceneObject @done(20-10-21 13:02)
            ✔ Provide info as to whether a certain component type is allowed more than once per object @done(20-10-20 16:02)
            ✘ Add InputProcessorComponent @cancelled(20-12-31 14:44)
            ✘ Rethink InputProcessingScriptComponent @cancelled(20-12-31 14:20)
        Factory:
            ✔ Method to attach camera and scripts to scene object@done(20-10-26 02:40)
            ☐ Forwarding methods to ShaderBuilder
        InputSplitter:
            ☐ Async dispatch of events
        Logger:
            ☐ Write a real logger, have the input logger use it
        Scene:
            ✔ In `moveObject`, add possibility to keep world position of moved object @done(20-10-13 14:49)
            ☐ Add something like `registerObjectTree(ScenePtr)` to import complex objects into a scene
            ✔ In `getWorldTransform`, the `_transformsUpToDate` test is useless in most cases: FIXED @done(20-10-13 15:33)
            ✔ Clean up the bullshit with `Scene::init` and `SceneObject::setScene` and whatnot, implement a clean factory instead @done(20-10-12 10:22)
            ✔ Refactor methods taking in pointers to taking in IDs where applicable @done(20-10-21 16:47)
            ✔ Return shared pointers instead of weak pointers where possible @done(20-10-20 16:19)
            ✔ Refactor getComponent & co to fit new several-per-type components @done(20-10-20 16:14)
            ✔ Refactor methods (e.g. object creation and registration) to skip sanity checks where unnecessary @done(20-10-21 18:02)
            ✔ Make init() and terminate() private with Factory as a friend @done(20-10-21 19:59)
        SceneObject:
            ✔ Add name for debugging purposes @done(20-10-19 12:04)
            ✔ Return shared pointers instead of weak pointers where possible @done(20-10-20 16:17)
            ✔ Keep a shared pointer to the scene @done(20-10-21 19:59)
            ☐ Remove component
        SceneRenderer:
            ✔ Implement a framerate limiter @done(20-10-19 21:49)
            ☐ Mesh rendering order based on the requested shader, then on their VertexDataManager handle
            ☐ Eliminate buffer swaps between objects sharing the same vertex data
            ☐ Transform direction of lights according to the world transform of their object
            ✔ Skip the normal restoration where applicable @done(20-10-24 17:47)
            ✔ Render meshes using a transform, not a matrix @done(20-10-24 17:47)
        Scripts:
            ✔ Separate FPSCameraScript into MouseCameraScript and KeyboardMovementScript @done(20-10-20 14:06)
            ✔ Give a camera reference to the KeyboardMovementScript for it to use a proper front vector @done(20-10-20 18:30)
            ✔ CameraAspectRatioScript: updates the camera aspect ratio based on framebuffer resize events @done(20-10-26 17:22)
            ☐ Gamepad movement and camera scripts
    Utilities:
        ✔ Write resource locator @done(21-01-05 21:54)
    Window:
        ✔ Isolate calls to GLFW in a windowing tool module @done(20-07-02 15:04)
        ✔ Fill adapter maps the same way as shader maps @done(20-10-26 01:49)
        ✔ Doc @done(20-10-26 01:49)
        ✔ Allow selection of window backend with an enum and templated methods @done(20-10-26 02:12)
        ✔ Move functionality to get input action/button names (used in BasicInputManager) @done(20-12-25 16:00)
        ✘ Update concrete window instantiation mechanisms? @cancelled(21-01-31 17:12)
        ✔ Move rendering away in another thread, keep event polling in the main thread @done(21-01-31 17:46)
        Gamepad:
            ✔ Write GamepadState @done(21-01-25 12:37)
            ✔ Write Gamepad @done(21-01-25 15:18)
            ✔ Write GamepadManager @done(21-01-31 19:53)
            ✔ Update event flow @done(21-01-31 19:21)
            ✔ Handle connection / disconnection @done(21-02-04 08:24)
            ✔ Update input logger @done(21-02-06 01:04)
            ✔ Add a gamepad input splitter @done(21-02-06 01:04)
        ☐ Stop rendering when the window loses focus / is minimized
        InputProcessor:
            ☐ Think about breaking the interface apart for performance
        ☐ Implement an input poll rate limiter
    Examples:
        ☐ Times table arranged in a circle (https://www.youtube.com/watch?v=qhbuKbxJsk8)
        ☐ Spyrograph thing (https://www.youtube.com/watch?v=7Fn-26Jmi5E)
    FIXME:
        ✔ Transform::lookAt @done(20-10-13 17:04)
        ✔ Light attenuation @done(20-04-20 06:55)
    Crossplatform-ability:
        ✔ Provide OpenGL core context hint for GLFW except when EGL is used (i.e. on Wayland systems) @done(20-07-02 14:19)
    Online resources:
        https://www.youtube.com/watch?v=-bCeNzgiJ8I&list=PLckFgM6dUP2hc4iy-IdKFtqR9TeZWMPjm
        http://media.steampowered.com/apps/steamdevdays/slides/beyondporting.pdf
        https://www.slideshare.net/CassEveritt/approaching-zero-driver-overhead
